@article{WADLER1990231,
	title = "Deforestation: transforming programs to eliminate trees",
	journal = "Theoretical Computer Science",
	volume = "73",
	number = "2",
	pages = "231 - 248",
	year = "1990",
	issn = "0304-3975",
	doi = "https://doi.org/10.1016/0304-3975(90)90147-A",
	url = "http://www.sciencedirect.com/science/article/pii/030439759090147A",
	author = "Philip Wadler",
	abstract = "An algorithm that transforms programs to eliminate intermediate trees is presented. The algorithm applies to any term containing only functions with definitions in a given syntactic form, and is suitable for incorporation in an optimizing compiler."
}

@inproceedings{Gill:1993:SCD:165180.165214,
	author = {Gill, Andrew and Launchbury, John and Peyton Jones, Simon L.},
	title = {A Short Cut to Deforestation},
	booktitle = {Proceedings of the Conference on Functional Programming Languages and Computer Architecture},
	series = {FPCA '93},
	year = {1993},
	isbn = {0-89791-595-X},
	location = {Copenhagen, Denmark},
	pages = {223--232},
	numpages = {10},
	url = {http://doi.acm.org/10.1145/165180.165214},
	doi = {10.1145/165180.165214},
	acmid = {165214},
	publisher = {ACM},
	address = {New York, NY, USA},
}


@conference{4cec4a43c86444479dc0003182424795,
	title = "Functional Programming with Bananas, Lenses, Envelopes and Barbed Wire",
	abstract = "We develop a calculus for lazy functional programming based on recursion operators associated with data type definitions. For these operators we derive various algebraic laws that are useful in deriving and manipulating programs. We shall show that all example functions in Bird and Wadler's {"}Introduction to Functional Programming{"} can be expressed using these operators.",
	keywords = "EWI-7281, IR-56289",
	author = "Erik Meijer and J. Hughes and M.M. Fokkinga and Ross Paterson",
	note = "Imported from EWI/DB PMS [db-utwente:inpr:0000003415]",
	year = "1991",
	month = "8",
	doi = "10.1007/3540543961_7",
	language = "Undefined",
	pages = "124--144",
}

@inproceedings{Wadler:1989:TF:99370.99404,
	author = {Wadler, Philip},
	title = {Theorems for Free!},
	booktitle = {Proceedings of the Fourth International Conference on Functional Programming Languages and Computer Architecture},
	series = {FPCA '89},
	year = {1989},
	isbn = {0-89791-328-0},
	location = {Imperial College, London, United Kingdom},
	pages = {347--359},
	numpages = {13},
	url = {http://doi.acm.org/10.1145/99370.99404},
	doi = {10.1145/99370.99404},
	acmid = {99404},
	publisher = {ACM},
	address = {New York, NY, USA},
}

@Inproceedings{pbr,
	author = {Peyton Jones, Simon and Tolmach, Andrew and Hoare, Tony},
	title = {Playing by the rules: rewriting as a practical optimisation technique in GHC},
	organization = {ACM SIGPLAN},
	year = {2001},
	month = {September},
	abstract = {We describe a facility for improving optimization of Haskell programs using rewrite rules. Library authors can use rules to express domain-specific optimizations that the compiler cannot discover for itself. The compiler can also generate rules internally to propagate information obtained from automated analyses. The rewrite mechanism is fully implemented in the released Glasgow Haskell Compiler.
	
	Our system is very simple, but can be effective in optimizing real programs. We describe two practical applications involving short-cut deforestation, for lists and for rose trees, and document substantial performance improvements on a range of programs.},
	url = {https://www.microsoft.com/en-us/research/publication/playing-by-the-rules-rewriting-as-a-practical-optimisation-technique-in-ghc/},
	edition = {2001 Haskell Workshop},
}

@article{Breitner:2014:SZC:2692915.2628141,
	author = {Breitner, Joachim and Eisenberg, Richard A. and Peyton Jones, Simon and Weirich, Stephanie},
	title = {Safe Zero-cost Coercions for Haskell},
	journal = {SIGPLAN Not.},
	issue_date = {September 2014},
	volume = {49},
	number = {9},
	month = aug,
	year = {2014},
	issn = {0362-1340},
	pages = {189--202},
	numpages = {14},
	url = {http://doi.acm.org/10.1145/2692915.2628141},
	doi = {10.1145/2692915.2628141},
	acmid = {2628141},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {coercion, haskell, newtype deriving, type class},
}

@article{paramorphismFusion,
	author = {Domínguez, Facundo and Pardo, Alberto},
	year = {2006},
	month = {07},
	pages = {},
	title = {Program fusion with paramorphisms}
}

@article{Mokhov:2017:AGC:3156695.3122956,
	author = {Mokhov, Andrey},
	title = {Algebraic Graphs with Class (Functional Pearl)},
	journal = {SIGPLAN Not.},
	issue_date = {October 2017},
	volume = {52},
	number = {10},
	month = sep,
	year = {2017},
	issn = {0362-1340},
	pages = {2--13},
	numpages = {12},
	url = {http://doi.acm.org/10.1145/3156695.3122956},
	doi = {10.1145/3156695.3122956},
	acmid = {3122956},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {Haskell, algebra, graph theory},
}

@misc{ekmett:eschems,
	author = "Edward A. Kmett",
	title = "recursion-schemes package",
	year = "2015",
	url = "http://hackage.haskell.org/package/recursion-schemes",
	note = "[Online; accessed 21-February-2019]"
}

@misc{dominguez:hfusion,
	author = "Facundo Dominguez ",
	title = "hfusion package",
	year = "201",
	url = "http://hackage.haskell.org/package/hfusion",
	note = "[Online; accessed 12-March-2019]"
}
@misc{ghc:manual,
	author = "GHC developers",
	title = "GHC's 8.6.2 manual",
	year = "2019",
	url = "https://downloads.haskell.org/~ghc/8.6.2/docs/html/users_guide/glasgow_exts.html#rewrite-rules",
	note = "[Online; accessed 03-March-2019]"
}

@misc{haskellReport,
	author = "Simon Marlow and other",
	title = "Haskell 2010 Language Report",
	year = "2010",
}

@inproceedings{Voigtlnder2008TypesFP,
	title={Types for Programming and Reasoning},
	author={Nat Janis Voigtl{\"a}nder},
	year={2008}
}

@Article{Meertens1992,
	author="Meertens, Lambert",
	title="Paramorphisms",
	journal="Formal Aspects of Computing",
	year="1992",
	month="Sep",
	day="01",
	volume="4",
	number="5",
	pages="413--424",
	abstract="``Catamorphisms'' are functions on an initial data type (an inductively defined domain) whose inductive definitional pattern mimics that of the type. These functions have powerful calculation properties by which inductive reasoning can be replaced by equational reasoning. This paper introduces a generalisation of catamorphisms, dubbed ``paramorphisms''. Paramorphisms correspond to a larger class of inductive definition patterns; in fact, we show that any function defined on an initial type can be expressed as a paramorphism. In spite of this generality, it turns out that paramorphisms have calculation properties very similar to those of catamorphisms. In particular, we prove a Unique Extension Property and a Promotion Theorem for paramorphisms.",
	issn="1433-299X",
	doi="10.1007/BF01211391",
	url="https://doi.org/10.1007/BF01211391"
}

@Inproceedings{JV04,
	url = {http://www.janis-voigtlaender.eu/JV04.html},
	author  = {Patricia Johann and Janis Voigtl\"ander},
	title   = {Free Theorems in the Presence of \(\mathit{seq}\)},
	editor  = {Neil D.\ Jones and Xavier Leroy},
	booktitle = {31st Symposium on Principles of Programming Languages, 
	Venice, Italy, Proceedings},
	series  = {SIGPLAN Notices},
	volume  = {39},
	number  = {1},
	pages   = {99-110},
	month   = jan,
	year    = {2004},
	publisher = {ACM Press},
	doi = {10.1145/982962.964010},
	keywords = {controlling strict evaluation, correctness proofs, denotational semantics, 
	Haskell, logical relations, parametricity, program transformations, 
	short cut fusion, theorems for free},
	note = {Extended version accepted to {\it Fundamenta Informaticae}}}

@inproceedings{PeytonJones:2007:CSH:1291151.1291200,
	author = {Peyton Jones, Simon},
	title = {Call-pattern Specialisation for Haskell Programs},
	booktitle = {Proceedings of the 12th ACM SIGPLAN International Conference on Functional Programming},
	series = {ICFP '07},
	year = {2007},
	isbn = {978-1-59593-815-2},
	location = {Freiburg, Germany},
	pages = {327--337},
	numpages = {11},
	url = {http://doi.acm.org/10.1145/1291151.1291200},
	doi = {10.1145/1291151.1291200},
	acmid = {1291200},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {compilers, haskell, optimisation, specialisation},
} 

@article{Johann:2002:GSF:641433.641471,
	author = {Johann, Patricia},
	title = {A Generalization of Short-Cut Fusion and Its Correctness Proof},
	journal = {Higher Order Symbol. Comput.},
	issue_date = {December 2002},
	volume = {15},
	number = {4},
	month = dec,
	year = {2002},
	issn = {1388-3690},
	pages = {273--300},
	numpages = {28},
	url = {https://doi.org/10.1023/A:1022982420888},
	doi = {10.1023/A:1022982420888},
	acmid = {641471},
	publisher = {Kluwer Academic Publishers},
	address = {Hingham, MA, USA},
	keywords = {correctness proofs, functional programming, operational semantics, parametricity, polymorphism, program transformation, short-cut fusion, theorems for free},
} 

@inproceedings{Gill1996CheapDF,
	title={Cheap deforestation for non-strict functional languages},
	author={Andrew John Gill},
	year={1996}
}

@INPROCEEDINGS{Coutts07streamfusion,
	author = {Duncan Coutts and Roman Leshchinskiy and Don Stewart},
	title = {Stream Fusion. From Lists to Streams to Nothing at All},
	booktitle = {ICFP’07},
	year = {2007},
	publisher = {}
}